package cmd

import (
	"github.com/denandz/sourcemapper/core"
	"github.com/spf13/cobra"
	"os"
)

var (
	output   string
	proxy    string
	insecure bool
	headers  []string
)

// rootCmd represents the base command when called without any subcommands
var rootCmd = &cobra.Command{
	Use:   "sourcemapper <URL or path>",
	Short: "Extract JavaScript source trees from Sourcemap files",
	Args:  cobra.ExactArgs(1),
	Long: `
A golang tool to parse a sourcemap as generated by webpack
or the like and spit out the original JavaScript files,
recreating the source tree based on the file paths in the sourcemap.`,
	Run: func(cmd *cobra.Command, args []string) {

		core.Run(
			args[0],
			headers,
			output,
			insecure,
			proxy,
		)
	},
}

func Execute() {
	err := rootCmd.Execute()
	if err != nil {
		os.Exit(1)
	}
}

func init() {
	// Set up all the relevant flags here

	rootCmd.Flags().StringArrayVarP(&headers, "header", "H", []string{},
		`Send headers with the request, similar to curl's -H. Can be set multiple times. For example:
./sourcemapper --header "Cookie: session=bar" --header "Authorization: blerp"
`)

	rootCmd.Flags().StringVarP(&output, "output", "o", "", "Source file output directory")
	// Mark output flag as required
	rootCmd.MarkFlagRequired("output")
	rootCmd.Flags().BoolVarP(&insecure, "insecure", "k", false, "Ignore invalid TLS certificates")
	rootCmd.Flags().StringVarP(&proxy, "proxy", "p", "", "Proxy URL")
}
